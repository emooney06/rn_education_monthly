import pandas as pd
import os
from functools import reduce
import string
import numpy as np
import collections
import re
from datetime import datetime
import sys
import smtplib,ssl
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.utils import formatdate
from email import encoders


edu_data_path = os.path.join('C:\\', 'Users', 'ejmooney', 'Desktop', 'testData', 'rnEducation.xls')
hr_data_path =os.path.join('C:\\', 'Users', 'ejmooney', 'Desktop', 'testData', 'hrReport.xls')

test_path =os.path.join('C:\\', 'Users', 'ejmooney', 'Desktop', 'testData', 'testData.xlsx')
tempPat =os.path.join('C:\\', 'Users', 'ejmooney', 'Desktop', 'testData', 'tempFile.xlsx')
master_alias_path =os.path.join('C:\\', 'Users', 'ejmooney', 'Desktop', 'testData', 'MasterAlias.xlsx')
edu_job_codes_path =os.path.join('C:\\', 'Users', 'ejmooney', 'Desktop', 'testData', 'jobCodesMasterList.xlsx')
duplicates_path =os.path.join('C:\\', 'Users', 'ejmooney', 'Desktop', 'testData', 'duplicates.xlsx')
cert_summary_path =os.path.join('C:\\', 'Users', 'ejmooney', 'Desktop', 'testData', 'certSummaryData.xlsx')
edu_summary_path =os.path.join('C:\\', 'Users', 'ejmooney', 'Desktop', 'testData', 'eduSummaryData.xlsx')


#edu_data_path = os.path.join('C:\\', 'Users', 'Ethan', 'OneDrive', 'Desktop', 'testData', 'rnEducation.xls')
#hr_data_path =os.path.join('C:\\', 'Users', 'Ethan', 'OneDrive', 'Desktop', 'testData', 'hrReport.xls')
#test_path =os.path.join('C:\\', 'Users', 'Ethan', 'OneDrive', 'Desktop', 'testData', 'testData.xlsx')

def getQtrStr(month_string):
    if (
        monthStr == 'Jan'
        or monthStr == 'JAN'
        or monthStr == 'jan'
        or monthStr == 'jAN'
        or monthStr == 'January'
        or monthStr == 'january'
        or monthStr == 'JANUARY'
        or monthStr == 'jANUARY'
        or monthStr == '01'
        or monthStr == '1'
        ): 
        qtrStr = '1'
    elif (
        monthStr == 'Feb'
        or monthStr == 'FEB'
        or monthStr == 'feb'
        or monthStr == 'fEB'
        or monthStr == 'February'
        or monthStr == 'february'
        or monthStr == 'FEBRUARY'
        or monthStr == 'fEBRUARY'
        or monthStr == '02'
        or monthStr == '2'
        ):
        qtrStr = '1'
    elif (
        monthStr == 'Mar'
        or monthStr == 'MAR'
        or monthStr == 'mar'
        or monthStr == 'mAR'
        or monthStr == 'March'
        or monthStr == 'march'
        or monthStr == 'MARCH'
        or monthStr == 'mARCH'
        or monthStr == '03'
        or monthStr == '3'
        ):
        qtrStr = '1'
    elif (
        monthStr == 'Apr'
        or monthStr == 'APR'
        or monthStr == 'apr'
        or monthStr == 'aPR'
        or monthStr == 'April'
        or monthStr == 'april'
        or monthStr == 'APRIL'
        or monthStr == 'aPRIL'
        or monthStr == '04'
        or monthStr == '4'
        ):
        qtrStr = '2'
    elif (
        monthStr == 'May'
        or monthStr == 'MAY'
        or monthStr == 'may'
        or monthStr == 'mAY'
        or monthStr == '05'
        or monthStr == '5'
        ):
        qtrStr = '2'
    elif (
        monthStr == 'Jun'
        or monthStr == 'JUN'
        or monthStr == 'jun'
        or monthStr == 'jUN'
        or monthStr == 'June'
        or monthStr == 'june'
        or monthStr == 'JUNE'
        or monthStr == 'jUNE'
        or monthStr == '06'
        or monthStr == '6'
        ):
        qtrStr = '2'
    elif (
        monthStr == 'Jul'
        or monthStr == 'JUL'
        or monthStr == 'jul'
        or monthStr == 'jUL'
        or monthStr == 'July'
        or monthStr == 'july'
        or monthStr == 'JULY'
        or monthStr == 'jULY'
        or monthStr == '07'
        or monthStr == '7'
        ):
        qtrStr = '3'
    elif (
        monthStr == 'Aug'
        or monthStr == 'AUG'
        or monthStr == 'aug'
        or monthStr == 'aUG'
        or monthStr == 'August'
        or monthStr == 'august'
        or monthStr == 'AUGUST'
        or monthStr == 'aUGUST'
        or monthStr == '08'
        or monthStr == '8'
        ):
        qtrStr = '3'
    elif (
        monthStr == 'Sep'
        or monthStr == 'SEP'
        or monthStr == 'sep'
        or monthStr == 'sEP'
        or monthStr == 'September'
        or monthStr == 'september'
        or monthStr == 'SEPTEMBER'
        or monthStr == 'sEPTEMBER'
        or monthStr == '09'
        or monthStr == '9'
        ):
        qtrStr = '3'
    elif (
        monthStr == 'Oct'
        or monthStr == 'OCT'
        or monthStr == 'oct'
        or monthStr == 'oCT'
        or monthStr == 'October'
        or monthStr == 'october'
        or monthStr == 'OCTOBER'
        or monthStr == 'oCTOBER'
        or monthStr == '10'
        ):
        qtrStr = '4'
    elif (
        monthStr == 'Nov'
        or monthStr == 'NOV'
        or monthStr == 'nov'
        or monthStr == 'nOV'
        or monthStr == 'November'
        or monthStr == 'november'
        or monthStr == 'NOVEMBER'
        or monthStr == 'nOVEMBER'
        or monthStr == '11'
        ):
        qtrStr = '4'
    elif (
        monthStr == 'Dec'
        or monthStr == 'DEC'
        or monthStr == 'dec'
        or monthStr == 'dEC'
        or monthStr == 'December'
        or monthStr == 'december'
        or monthStr == 'DECEMBER'
        or monthStr == 'dECEMBER'
        or monthStr == '12'
        ):
        qtrStr = '4'
    
    return qtrStr;
# this function returns the 2-digit string of numbers for each month (useful in filepaths)
def getMonthNumStr(month_string):
     if (
        monthStr == 'Jan'
        or monthStr == 'JAN'
        or monthStr == 'jan'
        or monthStr == 'jAN'
        or monthStr == 'January'
        or monthStr == 'january'
        or monthStr == 'JANUARY'
        or monthStr == 'jANUARY'
        or monthStr == '01'
        or monthStr == '1'
        ): 
        monthNumStr = '01'
     elif (
        monthStr == 'Feb'
        or monthStr == 'FEB'
        or monthStr == 'feb'
        or monthStr == 'fEB'
        or monthStr == 'February'
        or monthStr == 'february'
        or monthStr == 'FEBRUARY'
        or monthStr == 'fEBRUARY'
        or monthStr == '02'
        or monthStr == '2'
        ):
        monthNumStr = '02'
     elif (
        monthStr == 'Mar'
        or monthStr == 'MAR'
        or monthStr == 'mar'
        or monthStr == 'mAR'
        or monthStr == 'March'
        or monthStr == 'march'
        or monthStr == 'MARCH'
        or monthStr == 'mARCH'
        or monthStr == '03'
        or monthStr == '3'
        ):
        monthNumStr = '03'
     elif (
        monthStr == 'Apr'
        or monthStr == 'APR'
        or monthStr == 'apr'
        or monthStr == 'aPR'
        or monthStr == 'April'
        or monthStr == 'april'
        or monthStr == 'APRIL'
        or monthStr == 'aPRIL'
        or monthStr == '04'
        or monthStr == '4'
        ):
        monthNumStr = '04'
     elif (
        monthStr == 'May'
        or monthStr == 'MAY'
        or monthStr == 'may'
        or monthStr == 'mAY'
        or monthStr == '05'
        or monthStr == '5'
        ):
        monthNumStr = '05'
     elif (
        monthStr == 'Jun'
        or monthStr == 'JUN'
        or monthStr == 'jun'
        or monthStr == 'jUN'
        or monthStr == 'June'
        or monthStr == 'june'
        or monthStr == 'JUNE'
        or monthStr == 'jUNE'
        or monthStr == '06'
        or monthStr == '6'
        ):
        monthNumStr = '06'
     elif (
        monthStr == 'Jul'
        or monthStr == 'JUL'
        or monthStr == 'jul'
        or monthStr == 'jUL'
        or monthStr == 'July'
        or monthStr == 'july'
        or monthStr == 'JULY'
        or monthStr == 'jULY'
        or monthStr == '07'
        or monthStr == '7'
        ):
        monthNumStr = '07'
     elif (
        monthStr == 'Aug'
        or monthStr == 'AUG'
        or monthStr == 'aug'
        or monthStr == 'aUG'
        or monthStr == 'August'
        or monthStr == 'august'
        or monthStr == 'AUGUST'
        or monthStr == 'aUGUST'
        or monthStr == '08'
        or monthStr == '8'
        ):
        monthNumStr = '08'
     elif (
        monthStr == 'Sep'
        or monthStr == 'SEP'
        or monthStr == 'sep'
        or monthStr == 'sEP'
        or monthStr == 'September'
        or monthStr == 'september'
        or monthStr == 'SEPTEMBER'
        or monthStr == 'sEPTEMBER'
        or monthStr == '09'
        or monthStr == '9'
        ):
        monthNumStr = '09'
     elif (
        monthStr == 'Oct'
        or monthStr == 'OCT'
        or monthStr == 'oct'
        or monthStr == 'oCT'
        or monthStr == 'October'
        or monthStr == 'october'
        or monthStr == 'OCTOBER'
        or monthStr == 'oCTOBER'
        or monthStr == '10'
        ):
        monthNumStr = '10'
     elif (
        monthStr == 'Nov'
        or monthStr == 'NOV'
        or monthStr == 'nov'
        or monthStr == 'nOV'
        or monthStr == 'November'
        or monthStr == 'november'
        or monthStr == 'NOVEMBER'
        or monthStr == 'nOVEMBER'
        or monthStr == '11'
        ):
        monthNumStr = '11'
     elif (
        monthStr == 'Dec'
        or monthStr == 'DEC'
        or monthStr == 'dec'
        or monthStr == 'dEC'
        or monthStr == 'December'
        or monthStr == 'december'
        or monthStr == 'DECEMBER'
        or monthStr == 'dECEMBER'
        or monthStr == '12'
        ):
        monthNumStr = '12'
    
     return monthNumStr;


def checkAnswer(myAnswer):
    if (
        myAnswer == 'y' 
        or myAnswer == 'Y'
        or myAnswer == 'yes'
        or myAnswer == 'Yes'
        or myAnswer == 'YES'
        or myAnswer == 'YE'
        or myAnswer == 'Ye'
        or myAnswer == 'ye'
        or myAnswer == 'yES'
        ):
        myBool = True
    elif (
        myAnswer == 'N'
        or myAnswer == 'n'
        or myAnswer == 'no'
        or myAnswer == 'No'
        or myAnswer == 'NO'
        or myAnswer == 'nO'):
        myBool = False
    else:
        print('I don\'t understand your answer; please close this window, try again, and input a normal response next time newbie!')
        quit()
    return myBool;

#yearstr = str(input(' enter the year of the data you want:'))
#monthstr = str(input(' enter the month of the data you want:'))

#answer_input = str(input('Do you want to test this before you send emails? \n Please input \'yes\' or \'no\', or type \'exit()\' to quit.'))

##print(answerInput)
#checkedMatrix = checkAnswer(answerInput)

#print(checkedMatrix)

#if answer_input == 'yes':
#    double_check = str(input('Are you sure you want to send 100+ emails? \n Please input \'yes\' or \'no\', or type \'exit()\' to quit.'))
#    if double_check == 'no':
#        answer_input = 'no'



#qtrStr = getQtrStr(monthStr)
#monNumStr = getMonthNumStr(monthStr)
#daysInMonth = getNumDaysInMonth(monNumStr)

eduDict = {
'Advanced Practice Nurse': 0,
'Associate Degree -Nursing': 10,
'Associate of Arts Degree - Non-Nursing': 0,
'Associate of Science Degree - Non-Nursing': 0,
'Bachelors of Art':	0,
'Bachelors of Bus Admin': 0,
'Bachelors Science': 0,
'Bachelors Science Nursing': 100,
'Certified Nurse Practitioner':	0,
'Clincal Nurse Specialist':	100,
'Diploma - RN':	1,
'Doctor of Education': 0,
'Doctor of Nursing Practice': 10000,
'Doctor of Nursing Practice - Candidate': 0,
'Doctor of Oriental Medicine': 0,
'Doctor of Oriental Medicine - Candidate': 0,
'Doctor of Philosophy - Nursing': 10000,
'Doctor of Philosophy - Other Discipline':	0,
'Doctor of Philosophy (nursing) - Candidate': 0,
'Doctor of Philosophy (other) - Candidate':	0,
'Licensed Practical Nurse':	0,
'Master Public Health Nursing':	1000,
'Masters Business Administration': 0,
'Masters Degree - Other': 0,
'Masters of Arts': 0,
'Masters Public Health': 0,
'Masters Science': 0,
'Masters Science Nursing': 1000,
'Nurse Practitioner Specialist': 1000,
'Other - Foreign RN Education':	0
}

def intToDegree(row):
    if 10 > row['eduScore'] > 0 :
        val = 'Diploma'
    elif 100 > row['eduScore'] > 9:
        val = 'ADN'
    elif 1000 > row['eduScore'] >99:
        val = 'BSN'
    elif 10000 > row['eduScore'] >999:
        val = 'MSN'
    elif 100000 > row['eduScore'] > 9999:
        val = 'PhD or DNP'
    elif row['eduScore'] > 99999:
        val = 'No Ed Record Found'
    else: 
        val = 'Nursing Foreign or Unknown Degree'
    return val;

def inProgressCorrection(row):
    if row['Degree Category'] == 'In Progress':
        val = 0
    else: 
        val = 1
    return val;

edu_data = pd.read_excel(edu_data_path)
hr_data = pd.read_excel(hr_data_path)
edu_job_codes = pd.read_excel(edu_job_codes_path, 'RN_Education')

#Need to change EEID to ID in HR report
hr_data = hr_data.rename(columns = {'EE ID':'ID'})

hr_data.to_excel(test_path)

edu_data = edu_data[['ID', 'Degree Category', 'Description', 'Certification']]

edu_data.to_excel(test_path)

# combine the education data and HR data
edu_hr_comb = reduce(lambda x,y: pd.merge(x,y, on='ID', how='left'), [hr_data, edu_data])

edu_hr_comb.to_excel(test_path)




# Reduce the set of columns to those columns that are usefule
edu_hr_comb = edu_hr_comb[['Cost Center', 'ID', 'Department', 'Name', 'JOB', 'Title',  'Description', 'Degree Category', 'Certification']]


exclusion_list = edu_job_codes['excl_job_codes'].tolist()
#job_codes_list = edu_hr_comb['JOB'].tolist()
#list(set(job_codes_list))

for i in exclusion_list:
    #print('the job code is: ')
    #print(i)
    edu_hr_comb = edu_hr_comb[edu_hr_comb.JOB != i]

#edu_hr_comb = edu_hr_comb.dropna(subset=['Description'])

edu_hr_comb.to_excel(test_path)
# correct for "in progress status" by adding a column of 0 for in progress and 1 for all else
edu_hr_comb['multInProgr'] = edu_hr_comb.apply (lambda row: inProgressCorrection(row), axis=1)
edu_hr_comb.to_excel(test_path)
# change the title cost center and ID to string to protect them from the sum function later truncated
edu_hr_comb[['Title', 'Cost Center', 'ID']] = edu_hr_comb[['Title', 'Cost Center', 'ID']].astype(str)
edu_hr_comb.to_excel(test_path)

#edu_hr_comb = edu_hr_comb[~edu_hr_comb['Title'].str.contains('LPN')]
#edu_hr_comb.to_excel(test_path)
# convert the calendar to the integer (bit mask) based on the eduDictionary - this is the eduScore
edu_hr_comb['eduScore']= edu_hr_comb['Description'].map(eduDict)
edu_hr_comb.to_excel(test_path)

# make any null value in the eduScore column a zero so when it is multiplied by the degree in progress indicator
#   the product will be zero (indicating no degree was specified.
edu_hr_comb['eduScore'] = edu_hr_comb['eduScore'].fillna(100000)
edu_hr_comb['Certification'] = edu_hr_comb['Certification'].fillna('N')
edu_hr_comb.to_excel(test_path)

# multiply the eduScore and multInProg values to get the adjustment for degrees in progress
edu_hr_comb['eduScore'] = edu_hr_comb['eduScore'] * edu_hr_comb['multInProgr']
edu_hr_comb.to_excel(test_path)

# group by rows that will be duplicate so the eduScore integer (bit mask) can be summed
edu_hr_comb2= edu_hr_comb.groupby(['Name', 'Title', 'Cost Center','ID', 'JOB', 'Certification']).sum().reset_index()
edu_hr_comb2.to_excel(test_path)

# Reduce HR data to useful columns
hr_data = hr_data[['ID', 'Department']]
# make the ID a string so it can be merged with the other combined data
hr_data['ID'] = hr_data['ID'].astype(str)
#merge the combined data with hr data again to get the department
edu_hr_comb2 = reduce(lambda x,y: pd.merge(x,y, on='ID', how='left'), [edu_hr_comb2, hr_data])


#edu_hr_comb2['eduScore'] = edu_hr_comb2['eduScore'].astype(int)
edu_hr_comb2['corrEdu'] = edu_hr_comb2.apply (lambda row: intToDegree(row), axis=1)
edu_hr_comb2.to_excel(test_path)

# *** Testing, can change variable name when ready for prod
test = pd.read_excel(test_path)
# Reduce the dataframe to columns that are needed now and re-order to make more readable
test = test[['Cost Center', 'Department', 'Name', 'Title', 'corrEdu', 'Certification']]
test.columns = ['Cost Center', 'Department', 'Name', 'Title', 'Degree', 'Certification']
# make cost center a string so the left 4 digits can be truncated
test['Cost Center'] = test['Cost Center'].astype(str)
# truncate the cost center to the common 5-digit cost center
test['Cost Center'] = test['Cost Center'].str[4:]
test.to_excel(test_path)

# convert cost center back to integer so it can be used to match a list of integer versions of cost center
test['Cost Center'] = test['Cost Center'].astype(int)
# drop duplicates that are created having both expired and active certifications (keep last because 'y' is alphabetically after 'E'
test = test.drop_duplicates(['Cost Center', 'Name'], keep='last')
test.loc[test.Certification == 'N', 'Certification'] = 'No'
test.loc[test.Certification == 'Y', 'Certification'] = 'Yes'
test.loc[test.Certification == 'E', 'Certification'] = 'Expired'
test.to_excel(test_path)

print(test)

def create_dict(file_path, sheet_str, key_str, value_str):
    # main alias sheet from masterAliasRecord to a dataframe
    alias_df = pd.read_excel(file_path, sheet_str)
    # limit alias dataframe to cost center and UD Email
    alias_df = alias_df[[key_str, value_str]]
    # convert the alias record to a dictionary
    new_dict = alias_df.set_index(key_str)[value_str].to_dict()
    return new_dict;

#create the dictionaries to fill in information needed for the monthly report
email_dict = create_dict(master_alias_path, 'MainAlias', 'Cost_Center', 'UD_Email')
unit_name_dict = create_dict(master_alias_path, 'MainAlias', 'Cost_Center', 'NCI_Standard_Name')
NDNQI_Reporting_Name_dict = create_dict(master_alias_path, 'MainAlias', 'Cost_Center', 'NDNQI_Reporting_Unit_Name')
NDNQI_Unit_Type_dict = create_dict(master_alias_path, 'MainAlias', 'NDNQI_Reporting_Unit_Name', 'NDNQI_Unit_Type_(Monthly)')
Exec_dict =  create_dict(master_alias_path, 'MainAlias', 'NDNQI_Reporting_Unit_Name', 'Executive_Director')

# map the unit name as it appears on the monthly report based on the cost center
test['NDNQI Unit Name'] = test['Cost Center'].map(NDNQI_Reporting_Name_dict)



#reduce the columns to only data that is needed for education
edu_test = test[['NDNQI Unit Name', 'Name', 'Degree']]
edu_test.to_excel(edu_summary_path)

#pivot the data to make the columns each level of education
test_pivot = edu_test.pivot_table(edu_test, index='NDNQI Unit Name', columns=['Degree'], aggfunc='count')

#reset the index the dictionaries can be used based on the 'NDNQI Unit name'
test_pivot = test_pivot.reset_index()
#map the missing information from the dictionaries
test_pivot['Exec Director'] = test_pivot['NDNQI Unit Name'].map(Exec_dict)
test_pivot['NDNQI Unit Type'] = test_pivot['NDNQI Unit Name'].map(NDNQI_Unit_Type_dict)
#reorder the columns so they match the format of the monthly report
test_pivot = test_pivot[[('NDNQI Unit Name', ''),('Exec Director', ''), ('NDNQI Unit Type', ''), ('Name', 'Diploma'), ('Name', 'ADN'), ('Name', 'BSN'), ('Name', 'MSN'), ('Name', 'PhD or DNP'), ('Name', 'Nursing Foreign or Unknown Degree'), ('Name', 'No Ed Record Found')]]
#insert the column that describes the measure, which is required to be formatted as it is in the monthly report
test_pivot.insert(3, 'Measure Long Description', '% Direct Care RNs with BSN, MSN, or PhD')
test_pivot.to_excel(edu_summary_path)




cert_test = test[['NDNQI Unit Name', 'Name', 'Certification']]
cert_test.to_excel(cert_summary_path)
cert_pivot = cert_test.pivot_table(cert_test, index='NDNQI Unit Name', columns=['Certification'], aggfunc='count')
cert_pivot = cert_pivot.reset_index()
cert_pivot['Exec Director'] = cert_pivot['NDNQI Unit Name'].map(Exec_dict)
cert_pivot['NDNQI Unit Type'] = cert_pivot['NDNQI Unit Name'].map(NDNQI_Unit_Type_dict)
cert_pivot.to_excel(cert_summary_path)

cert_pivot = cert_pivot[[('NDNQI Unit Name', ''),('Exec Director', ''), ('NDNQI Unit Type', ''), ('Name', 'Yes'), ('Name', 'No'), ('Name', 'Expired'), ('Name', 'No Expiration Listed')]]
cert_pivot.insert(3, 'Measure Long Description', '% Direct Care RNs with Specialty Certification')
cert_pivot.to_excel(cert_summary_path)



# main alias sheet from masterAliasRecord to a dataframe
alias_df = pd.read_excel(master_alias_path, 'MainAlias')
    ## limit alias dataframe to cost center and UD Email
    #alias_df = alias_df[['Cost_Center', 'UD_Email']]
    ## convert the alias record to a dictionary
    #email_dict = alias_df.set_index('Cost_Center')['UD_Email'].to_dict()

# get the cost centers to iterate through from the alias dataframe; make it a list
cost_center_list = alias_df['Cost_Center'].values.tolist()
# initialize a time variable for current month/year for email text
global date_month
date_month = datetime.today().strftime('%Y-%m')


#########################################

#exit()

###########################################

x = 0
#alias list is a list of all cost centers from MasterAliasRecord
for line in cost_center_list:
    #print(line)
    # variable cost_center be what the cost center is for this iteration
    cost_center = line
    str_cost_center = str(cost_center)
    print(cost_center)
    # try and except block is used because not every cost center has a Unit Director email, without
    #   the try and except block it will throw exception error when one of these are encountered
    try:
        #cost_center = str(cost_center)
        # initialize variable that is email address which is a found from the email dictionary object
        email = email_dict.get(cost_center)
        global unit_name
        unit_name = unit_name_dict.get(cost_center)
        #print('The email address is: ')
        #print(email)
    except KeyError:
        # If there is no UD Email associated with that cost center, just print it to console
        print('There is no email address for: ') 
        print(cost_center)
    # edu_data is the dataframe of all education data but filtered by the cost center for this iteration
    temp_data = test.loc[test['Cost Center'] == cost_center]
    edu_totals = temp_data['Degree'].value_counts()   
    edu_totals = pd.DataFrame(edu_totals)
    edu_totals['degree_pct'] = (edu_totals['Degree']/edu_totals['Degree'].sum()) * 100 
    edu_totals['degree_pct'] = edu_totals['degree_pct'].round(1)
    edu_totals['degree_pct'] = (edu_totals['degree_pct'].astype(str)) + '%'
    detail_table = temp_data.to_html()
    edu_table = edu_totals.to_html()

    cert_totals = temp_data['Certification'].value_counts()
    cert_totals =pd.DataFrame(cert_totals)
    cert_totals['Certification'] = (cert_totals['Certification']/cert_totals['Certification'].sum()) * 100
    cert_totals['Certification'] = cert_totals['Certification'].round(1)
    cert_totals['Certification'] = (cert_totals['Certification'].astype(str)) + '%'
    cert_table = cert_totals.to_html()

    # me == my email address
    # you == recipient's email address
    me = "ejmooney@salud.unm.edu"
    you = email

    # create message container - the correct mime type is multipart/alternative.
    msg = MIMEMultipart('alternative')
    msg['subject'] = "*Testing* NDNQI RN Education Data " + date_month + ' Unit: ' + unit_name
    msg['from'] = me
    msg['to'] = you; 'ndnqi@salud.unm.edu'
    msg['cc'] = 'ndnqi@salud.unm.edu'

    # create the body of the message (a plain-text and an html version).
    # text = "hi!\nhow are you?\nhere is the link you wanted:\nhttps://www.python.org\n"
    greeting = '''\
    <html> 
        <head> 
            <font size='4'> *** You have been selected to provide feedback on a his email is a test of a new NDNQI process.  We appreciate any comments or feedback you can provide. *** <br><br>
            Hello Unit Director,<br><br> This is an automated message from your ndnqi team at nursing 
            clinical informatics. Please be advised the the RN Education and Certification data
            below does not include RN positions which are excluded from NDNQI reporting of Education and Certification.  <br><br>
            Current exclusion criteria can be found at
            https://members.nursingquality.org/ndnqiportal. If you find an employee is missing from the Nurse Recognition Database 
            after you have verified they entered their data, please submit an IT help ticket.  You may also email any questions
            or comments to ndnqi@salud.unm.edu. <br><br>
            Thank You,<br>
            Barry Brooks, RN <br>
            Ethan Mooney, RN, MSN, PCCN<br>
            Hospital NDNQI Team<br>
            Nursing Clinical Informatics<br><br><br>
           </font>
        </head>
        <body><font size='4'>RN Education Summary:</font></body>            
    <html>
    '''

    cert_title = '''\
    <html>
        <head>
            <font size='4'><br><br> RN Certification Summary:</font>
        <head>
    <html>
    '''

    details_title = '''\
    <html>
        <head>
            <font size='4'><br><br>Education and Certification Details</font>
        <head>
    <html>
    '''



    html = greeting + edu_table + cert_title + cert_table + details_title + detail_table


    # record the mime types of both parts - text/plain and text/html.
    # part1 = mimetext(text, 'plain')
    part2 = MIMEText(html, 'html')

    # attach parts into message container.
    # according to rfc 2046, the last part of a multipart message, in this case
    # the html message, is best and preferred.
    #msg.attach(part1)
    msg.attach(part2)

    # send the message via local smtp server.
    s = smtplib.SMTP('hsclink.health.unm.edu')
    # sendmail function takes 3 arguments: sender's address, recipient's address
    # and message to send - here it is sent as one string.
    s.sendmail(me, you, msg.as_string())
    s.quit()
    x = x + 1


